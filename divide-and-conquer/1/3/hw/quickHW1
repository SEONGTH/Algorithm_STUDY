#include <iostream>
using namespace std;

#define MAX 101010;
#define SWAP(x, y) ( (x)^=(y), (y)^=(x), (x)^=(y) )
//use XOR

int *sorted;
int arr[MAX] = {0,};
int n;


int partition(int arr[], int left, int right){
    int pivot, low, high;
    pivot = arr[left];
    cout << "now pivot : " << pivot << endl;
    low = left + 1;
    high = right;
    do{
        while(low <= right && arr[low] < pivot){
            low++;
            cout << "now looking : " << low << "<-- low"<<endl;
        }
        while(high >= left && arr[high] > pivot){
            high--;
            cout << "now looking : " << low << "<-- low"<<endl;
        }
        if(low < high){
            cout << "swap : " << arr[low] << "," << arr[high] << endl;
            SWAP(arr[low], arr[left]);
        }
    }while(low < high);

    if(high!=left){
        SWAP(arr[high], arr[left]);
    }
    return high;
}

void quicksort(int arr[], int left, int right){
    if(left < right){
        int q = partition(arr, left, right);
        quicksort(arr,left, q - 1);
        quicksort(arr, q+1, right);
    }
}

int main(){
    int n;
    cin >> n;
    sorted = (int*)malloc(sizeof(int)*n);
    for(int i = 0; i < n; i++){
        cin >> arr[i];
        cout << " "<< arr[i];
    }
    cout << endl;
    quicksort( arr, 0, n-1);
}